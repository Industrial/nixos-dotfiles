#!/usr/bin/env bash
echo "> window-manager > river > start-river-nested"
exec > >(tee ./log/start-river-nested.log) 2>&1
set -euo pipefail

echo "features > window-manager > river > start-river-nested"

# Check if we're running in a Wayland session
if [ -z "${WAYLAND_DISPLAY:-}" ]; then
  echo "Error: No Wayland compositor detected. Please run this script from within a Wayland session."
  exit 1
fi

# Check if XDG_RUNTIME_DIR is set
if [ -z "${XDG_RUNTIME_DIR:-}" ]; then
  echo "Error: XDG_RUNTIME_DIR is not set"
  exit 1
fi

# Create a subdirectory in XDG_RUNTIME_DIR for River
RIVER_RUNTIME_DIR="${XDG_RUNTIME_DIR}/river-nested"
mkdir -p "$RIVER_RUNTIME_DIR"
chmod 700 "$RIVER_RUNTIME_DIR"

# Ensure cleanup on exit
cleanup() {
  echo "features > window-manager > river > start-river-nested > Cleaning up River runtime directory"
  rm -rf "$RIVER_RUNTIME_DIR"
  echo "features > window-manager > river > start-river-nested > River Nested Session End: $(date)"
}
trap cleanup EXIT

echo "features > window-manager > river > start-river-nested > River runtime dir: ${RIVER_RUNTIME_DIR}"

# Start River with proper Wayland configuration
echo "features > window-manager > river > start-river-nested > Starting River"

env \
  RIVER_RUNTIME_DIR=$RIVER_RUNTIME_DIR \
  WAYLAND_DEBUG=1 \
  river &
RIVER_PID=$!

echo "features > window-manager > river > start-river-nested > River PID: ${RIVER_PID}"

# Wait for River to exit
wait $RIVER_PID

echo "features > window-manager > river > start-river-nested > Session ended" 
