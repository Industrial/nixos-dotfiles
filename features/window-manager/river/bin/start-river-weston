#!/usr/bin/env bash
set -euo pipefail

echo "features > window-manager > river > start-river-nested"

# Find an unused wayland socket
WAYLAND_DISPLAY_NUM=1
while [ -e "$XDG_RUNTIME_DIR/wayland-${WAYLAND_DISPLAY_NUM}" ]; do
  WAYLAND_DISPLAY_NUM=$((WAYLAND_DISPLAY_NUM + 1))
done
NESTED_WAYLAND_DISPLAY="wayland-nested-${WAYLAND_DISPLAY_NUM}"

echo "features > window-manager > river > start-river-nested > Nested Wayland display: ${NESTED_WAYLAND_DISPLAY}"

# Create a temporary directory for the nested session
NESTED_DIR=$(mktemp -d)
trap "rm -rf $NESTED_DIR" EXIT

echo "features > window-manager > river > start-river-nested > Nested runtime dir: ${NESTED_DIR}"

# Try to use different approaches based on available tools
if command -v cage &> /dev/null; then
  echo "features > window-manager > river > start-river-nested > Using Cage for nesting"
  
  # Start cage with an environment that will run river
  cage -d -s -- env \
    XDG_RUNTIME_DIR="$NESTED_DIR" \
    WAYLAND_DISPLAY="$NESTED_WAYLAND_DISPLAY" \
    river &
  CAGE_PID=$!
  trap "kill $CAGE_PID 2>/dev/null || true; rm -rf $NESTED_DIR" EXIT
  
  echo "features > window-manager > river > start-river-nested > Cage PID: ${CAGE_PID}"
  
  # Wait for cage to exit
  wait $CAGE_PID

elif command -v waypipe &> /dev/null; then
  echo "features > window-manager > river > start-river-nested > Using waypipe for nesting"
  
  # Start waypipe server
  waypipe --socket="$NESTED_DIR/waypipe.sock" server &
  WAYPIPE_PID=$!
  
  echo "features > window-manager > river > start-river-nested > Waypipe PID: ${WAYPIPE_PID}"
  
  # Start a client that connects to the waypipe socket and runs river
  waypipe --socket="$NESTED_DIR/waypipe.sock" client \
    env XDG_RUNTIME_DIR="$NESTED_DIR" river &
  RIVER_PID=$!
  
  echo "features > window-manager > river > start-river-nested > River PID: ${RIVER_PID}"
  
  # Ensure processes are killed on exit
  trap "kill $WAYPIPE_PID $RIVER_PID 2>/dev/null || true; rm -rf $NESTED_DIR" EXIT
  
  # Wait for river to exit
  wait $RIVER_PID

else
  # Fallback to direct X11 nesting (Xwayland)
  echo "features > window-manager > river > start-river-nested > Using Xwayland fallback for nesting"
  
  # Find first available display
  DISPLAY_NUM=1
  while [ -f "/tmp/.X${DISPLAY_NUM}-lock" ]; do
    DISPLAY_NUM=$((DISPLAY_NUM + 1))
  done
  XWAYLAND_DISPLAY=":${DISPLAY_NUM}"
  
  echo "features > window-manager > river > start-river-nested > Xwayland display: ${XWAYLAND_DISPLAY}"
  
  # Start Xwayland
  Xwayland $XWAYLAND_DISPLAY &
  XWAYLAND_PID=$!
  
  # Ensure Xwayland is killed on exit
  trap "kill $XWAYLAND_PID 2>/dev/null || true; rm -rf $NESTED_DIR" EXIT
  
  echo "features > window-manager > river > start-river-nested > Xwayland PID: ${XWAYLAND_PID}"
  echo "features > window-manager > river > start-river-nested > Waiting for Xwayland to start"
  sleep 1
  
  # Start River with Xwayland as the output
  DISPLAY=$XWAYLAND_DISPLAY \
  XDG_RUNTIME_DIR="$NESTED_DIR" \
  river -X $XWAYLAND_DISPLAY &
  RIVER_PID=$!
  
  echo "features > window-manager > river > start-river-nested > River PID: ${RIVER_PID}"
  
  # Wait for River to exit
  wait $RIVER_PID
fi

echo "features > window-manager > river > start-river-nested > Session ended" 
